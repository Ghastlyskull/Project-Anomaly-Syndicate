<?xml version="1.0" encoding="utf-8" ?>
<Defs>

  <QuestScriptDef>
    <defName>Gha_CaptureAnomaly</defName>
    <rootSelectionWeight>1.0</rootSelectionWeight>
    <rootMinPoints>50</rootMinPoints>
    <canGiveRoyalFavor>true</canGiveRoyalFavor>
    <expireDaysRange>4~8</expireDaysRange>
    <questNameRules>
      <rulesStrings>
        <li>questName->The [anomaly] [gathering]</li>
        <li>questName->[anomaly] [gathering]</li>
        <li>questName->[asker_nameDef] and the [gathering]</li>
        <li>gathering->Gathering</li>
        <li>gathering->Infestation</li>
        <li>gathering->Convergence</li>
        <li>gathering->Horde</li>
        <li>gathering->Swarm</li>
        <li>anomaly->Dark Entity</li>
        <li>anomaly->Voidborn</li>
        <li>anomaly->Aberration</li>
        <li>anomaly->Disturbance</li>
      </rulesStrings>
    </questNameRules>
    <questDescriptionRules>
      <rulesStrings>
        <li>questDescription->[asker_nameFull], [asker_faction_leaderTitle] of [asker_faction_name], has sent us a message. A gathering of entities has been detected in a nearby location, posing a significant threat to stability in the area. \n\n[asker_label] is requesting that we exterminate the threat by eliminating all the Dark Entities inside the site. [asker_label] advises that specialized equipment may be necessary to survive the encounter.</li>
      </rulesStrings>
    </questDescriptionRules>
    <root Class="QuestNode_Sequence">
      <nodes>
        <li Class="QuestNode_SubScript">
          <def>Util_RandomizePointsChallengeRating</def>
          <parms>
            <pointsFactorTwoStar>1.3</pointsFactorTwoStar>
            <pointsFactorThreeStar>1.5</pointsFactorThreeStar>
            <minPointsTwoStar>250</minPointsTwoStar>
            <minPointsThreeStar>350</minPointsThreeStar>
          </parms>
        </li>
        <li Class="QuestNode_GetMap" />
        <li Class="ProjectAnomalySyndicate.Quests.QuestNode_GetLeaderOfFaction">
          <storeAs>asker</storeAs>
          <factionDef>Gha_Syndicate</factionDef>
        </li>
        <!-- Choose anomaly kind -->
        <li Class="ProjectAnomalySyndicate.Quests.QuestNode_GetAnomalyPawnKind">
          <storeAs>anomalyPawnKind</storeAs>
        </li>
        <!-- Generate lodger animals -->
        <li Class="QuestNode_GeneratePawn">
          <kindDef>$anomalyPawnKind</kindDef>
          <storeAs>anomaly</storeAs>
          <ensureNonNumericName>true</ensureNonNumericName>
        </li>
        <li Class="QuestNode_PawnsArrive">
          <pawns>$anomaly</pawns>
          <joinPlayer>false</joinPlayer>
        </li>
        <li Class="QuestNode_Set">
          <name>shuttleDelayTicks</name>
          <value>$(roundToTicksRough(randInt(5, 25)*60000))</value>
          <!-- 5~25 days to shuttle -->
        </li>
        <li Class="QuestNode_Set">
          <name>shuttleLeaveDelayTicks</name>
          <value>$(3*60000)</value>
        </li>
        <!-- Shuttle -->
        <li Class="QuestNode_ShuttleDelay">
          <delayTicks>$shuttleDelayTicks</delayTicks>
          <lodgers>
            <li>$anomaly</li>
          </lodgers>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_SubScript">
                <def>Util_TransportShip_Pickup</def>
                <parms>
                  <leaveDelayTicks>$shuttleLeaveDelayTicks</leaveDelayTicks>
                  <requiredPawns>
                    <li>$anomaly</li>
                  </requiredPawns>
                  <sendAwayIfAllDespawned>
                    <li>$anomaly</li>
                  </sendAwayIfAllDespawned>
                </parms>
              </li>

              <li Class="QuestNode_SendSignals">
                <outSignals>ShuttleArrived</outSignals>
              </li>

              <li Class="QuestNode_InspectString">
                <targets>$lodgers</targets>
                <inspectString TKey="InspectStringDepartShuttle">Should depart on shuttle</inspectString>
              </li>
              <li Class="QuestNode_Letter">
                <label TKey="LetterLabelShuttleArrived">Shuttle arrived</label>
                <text TKey="LetterTextShuttleArrived">The shuttle has arrived to collect [lodgersLabelSingOrPluralDef]. Be sure to have these people on the shuttle before it leaves in [shuttleLeaveDelayTicks_duration]:\n\n[lodgers]</text>
                <lookTargets>$pickupShipThing</lookTargets>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Calculate reward value -->
        <li Class="QuestNode_Set">
          <name>rewardValue</name>
          <value>0</value>
          <!-- 10 per day per person -->
        </li>
        <li Class="QuestNode_GetPawnKindCombatPower">
          <kindDef>$anomalyPawnKind</kindDef>
          <storeAs>anomalyCombatPower</storeAs>
        </li>
        <li Class="QuestNode_GetBodySize">
          <pawnKind>$anomalyPawnKind</pawnKind>
          <storeAs>anomalyBodySize</storeAs>
        </li>
        <li Class="QuestNode_Set">
          <name>anomalyRewardFactor</name>
          <value>$(0.5 *  0.1 * $anomalyCombatPower + 0.1 * $anomalyBodySize)</value>
        </li>
        <li Class="QuestNode_Set">
          <name>anomalyRewardFromCountAndDelay</name>
          <value>$($anomalyRewardFactor * ($shuttleDelayTicks / 60000))</value>
        </li>
        <li Class="QuestNode_Set">
          <name>rewardValue</name>
          <value>$($anomalyRewardFromCountAndDelay * 25)</value>
        </li>
        
        <!-- - - - - - - -  -->
        <!-- End conditions -->
        <!-- - - - - - - -  -->

        <!-- Anomaly died -->
        <li Class="QuestNode_Signal">
          <inSignal>anomaly.Destroyed</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label TKey="LetterLabelGuestDied">Guest died: {SUBJECT_definite}</label>
                <text TKey="LetterTextGuestDied">[letterSubject], who you were charged to protect, has died. [remainingWillNowLeave][failLetterEndingCommon]</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
                <goodwillChangeAmount>-5</goodwillChangeAmount>
                <goodwillChangeFactionOf>$asker</goodwillChangeFactionOf>
                <goodwillChangeReason>QuestPawnLost</goodwillChangeReason>
              </li>
            </nodes>
          </node>
        </li>


        <!-- Anomaly left map -->
        <li Class="QuestNode_Signal">
          <inSignal>anomaly.LeftMap</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label TKey="LetterLabelGuestLost">Guest lost: {SUBJECT_definite}</label>
                <letterDef>NegativeEvent</letterDef>
                <text TKey="LetterTextGuestLost">[letterSubject], who you were charged to protect, is gone. [remainingWillNowLeave][failLetterEndingCommon]</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
                <goodwillChangeAmount>-5</goodwillChangeAmount>
                <goodwillChangeFactionOf>$asker</goodwillChangeFactionOf>
                <goodwillChangeReason>QuestPawnLost</goodwillChangeReason>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Shuttle destroyed -->
        <li Class="QuestNode_Signal">
          <inSignal>pickupShipThing.Destroyed</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label TKey="LetterLabelShuttleDestroyed">Shuttle destroyed</label>
                <letterDef>NegativeEvent</letterDef>
                <text TKey="LetterTextShuttleDestroyed">The shuttle sent to collect [lodgersLabelSingOrPluralDef] has been destroyed. [lodgersLabelSingOrPluralDef] will now leave on foot. [failLetterEndingCommon]</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
                <goodwillChangeAmount>-5</goodwillChangeAmount>
                <goodwillChangeFactionOf>$asker</goodwillChangeFactionOf>
                <goodwillChangeReason>ShuttleDestroyed</goodwillChangeReason>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Shuttle sent -->
        <li Class="QuestNode_Signal">
          <inSignal>pickupShipThing.SentSatisfied</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <!-- End quest -->
              <li Class="QuestNode_GiveRewards">
                <parms>
                  <allowGoodwill>true</allowGoodwill>
                  <allowRoyalFavor>true</allowRoyalFavor>
                  <allowDevelopmentPoints MayRequire="Ludeon.RimWorld.Ideology">false</allowDevelopmentPoints>
                </parms>
              </li>
              <li Class="QuestNode_End">
                <outcome>Success</outcome>
              </li>

            </nodes>
          </node>

        </li>
        <li Class="QuestNode_Signal">
          <inSignal>pickupShipThing.SentUnsatisfied</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label TKey="LetterLabelQuestFailed">Quest failed: [resolvedQuestName]</label>
                <letterDef>NegativeEvent</letterDef>
                <text TKey="LetterTextQuestFailed">The shuttle sent to collect [lodgersLabelSingOrPluralDef] has departed. [lodgersLabelSingOrPluralDef] will now leave on foot. [failLetterEndingCommon]</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
                <goodwillChangeAmount>-5</goodwillChangeAmount>
                <goodwillChangeFactionOf>$asker</goodwillChangeFactionOf>
                <goodwillChangeReason>MemberMissedShuttle</goodwillChangeReason>
              </li>
            </nodes>
          </node>
        </li>
      </nodes>
    </root>
  </QuestScriptDef>

</Defs>